Unit of Work Pattern with EF

IDbContext


Injection Order
	* Context
	* UOW

UnitOfWork : IUnitOfWork
	ICompanyRepository
	IEmployeeRepository

IUnitOfWork
	Save()

	IDBContext
	ICompanyRepository
	IEmployeeRepository
	
CompanyRepository, Repository, ICompanyRepository	
	Needs context or UOW
	
ICompanyRepository, IRepository	
	Needs context or UOW

Repository : IRepository	
	Needs context or UOW
	
IRepository<T>
	Add(T)
	Remove(T)
	T Get(int id)
	IQueryable<T> GetAll()
	IQueryable<T> Get(Expression)


To add a new Table:
1) Create new IDomainRepository
2) Create new DomainRepository
2) Add new IDomainRepository to UnitOfWork
3) Add new IDomainRepository to UnitOfWork

More methods:
https://github.com/michaeldeongreen/Angular.io.QuickStart.Web.Api/blob/master/Angular.io.QuickStart.Web.Api.Repository/Repository.cs

1) Problem
	* Has to pass tons of repository objects to Classes
	* Domain Objects have to be related to save in 1 transaction
	* If you try to save (update) in 1 transaction, you get errors due to the session being closed
	
2) Solution
	* Inject and work with 1 Object, ie UOW
	* Can be mocked
	* Intuitive
	* Repositories can implement different interfaces
	
	* Con, see To add section above